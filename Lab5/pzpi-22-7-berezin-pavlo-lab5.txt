Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 5
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури 
та створення і відлагодження програмного коду
програмного застосунку мобільного пристрою
для програмної системи»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	













Харків, 2025
________________
5.1 Мета роботи


        На лабораторній роботі №5 потрібно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи.


5.2 Історія змін


Таблиця 1 — Історія змін та виправлень роботи
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	29.05.2025
	0.1
	Створено розділ «Історія змін»
	2
	29.05.2025
	0.1
	Створено розділ «Хід роботи»
	3
	29.05.2025
	0.1
	Створено розділ «Опис виконаної роботи»
	4
	30.05.2025
	0.1
	Створено розділ «Висновки»
	5
	30.05.2025
	0.1
	Додано посилання на відеозапис доповіді в додаток А
	

5.3 Хід роботи
        
        Мобільний застосунок повинен бути частиною системи і повинен взаємодіяти з нею. Для реалізації програмного застосунку можна використовувати технології для реалізації програмного забезпечення для мобільних платформ, вказані лектором.


5.4 Опис виконаної роботи


        У ході розробки мобільної версії додатку для моніторингу ліфтів було прийнято низку інженерних рішень, спрямованих на забезпечення ефективної роботи як для мешканців, так і для техніків. Додаток розроблено на платформі Android з використанням мови програмування Kotlin, що дозволяє ефективно реалізувати сучасні підходи до розробки, такі як використання Jetpack Compose для побудови інтерфейсу.
        У ході розробки мобільної версії додатку для моніторингу ліфтів було прийнято низку інженерних рішень, спрямованих на забезпечення ефективної роботи як для мешканців, так і для техніків. Додаток розроблено на платформі Android з використанням мови програмування Kotlin, що дозволяє ефективно реалізувати сучасні підходи до розробки, такі як використання Jetpack Compose для побудови інтерфейсу.
* Модуль автентифікації. Для мешканців та техніків реалізовано окремі репозиторії (AuthRepository та TechnicianAuthRepository), які відповідають за збереження токенів за допомогою DataStore. Це дозволяє забезпечити безпеку та зручне управління сесіями.
* Мережевий модуль. Використано бібліотеку Retrofit2 для взаємодії з REST API бекенду. Мережеві запити організовані через інтерфейси (ResidentsApi та TechniciansApi), що спрощує їхнє тестування та підтримку.
* Інтерфейс користувача. Екрани побудовані за допомогою Jetpack Compose, що дозволяє створювати сучасні та адаптивні UI. Для навігації між екранами використано NavHostController, що забезпечує зручну роботу зі складними потоками.
        Для мешканців реалізовано функціонал перегляду стану ліфтів, відправки екстрених викликів та перегляду історії ремонтів. Техніки можуть переглядати завдання, оновлювати статуси ліфтів та додавати коментарі до робіт. Усі операції виконуються в реальному часі за допомогою регулярних запитів до API.
        Додаток не підтримує офлайн-режим через вимоги безпеки, але забезпечує швидкий відгук завдяки оптимізованим мережевим запитам. Використання Kotlin Coroutines дозволяє ефективно обробляти асинхронні операції без блокування основного потоку.
        Таким чином, архітектура додатку поєднує сучасні технології та чітку організацію коду, що забезпечує стабільну роботу та зручне масштабування.
        URL на код на GitHub: https://github.com/NureBerezinPavlo/apz-pzpi-22-7-berezin-pavlo/tree/main/Lab5/pzpi-22-7-berezin-pavlo-lab5 


5.5 Висновки
        
        Розроблений мобільний додаток для моніторингу ліфтів реалізує чітку архітектуру, що поєднує модульність, безпеку та ефективну взаємодію з бекендом. Використання Kotlin та Jetpack Compose дозволило створити сучасний інтерфейс з адаптивним UI, а застосування MVVM і Clean Architecture забезпечило легкість підтримки та масштабування. Для мешканців ключовим є доступ до стану ліфтів та екстрених функцій, тоді як техніки отримують інструменти для оперативного реагування через систему завдань і телеметрії.
Інтеграція з REST API (Retrofit) та WebSocket забезпечує роботу в реальному часі, а FCM-сповіщення інформують користувачів про критичні зміни. Хоча додаток не підтримує офлайн-режим через вимоги безпеки, його продуктивність (відгук < 2 с) та зручність роботи роблять його ефективним рішенням для управління ліфтами.
ДОДАТОК А
Посилання на відеозапис та хронологічний опис доповіді


Відеозапис доповіді на YouTube: https://youtube.com/shorts/ESnD3Qqi3S8 
00:00 Частина для мешканців будинків
00:03 Авторизація мешканця
00:21 Головний екран для мешканців
00:24 Екстренний виклик
00:45 Список ліфтів та виклик техніка
00:48 Список сповіщень для мешканців
00:51 Налаштування для мешканців
01:14 Авторизація техніка
01:30 Головний екран для техніка
01:33 Проблемні ліфти
01:35 Детальний перегляд ліфта та змінення його стану
01:45 Зберігання змінень ліфта
02:05 Історія змінень
02:14 Профіль технік
________________


ДОДАТОК Б
UML-діаграми


  

Рисунок Б.1 — UML-діаграма прецедентів


  

Рисунок Б.2 — UML-діаграма компонент


  

Рисунок Б.3 — UML-діаграма взаємодії (Interaction Overview Diagram


  

Рисунок Б.4 — UML-діаграма діяльності (Activity Diagram)
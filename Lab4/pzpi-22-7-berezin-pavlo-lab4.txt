Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 4
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури,
створення та відлагодження програмного коду
вебклієнта програмної системи»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	















Харків, 2025
4.1 Мета роботи


На лабораторній роботі №4 потрібно розробити клієнтську / фронтенд-частину програмної системи.


4.2 Історія змін


Таблиця 1 — Історія змін та виправлень роботи
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	27.05.2025
	0.1
	Створено розділ «Історія змін»
	2
	27.05.2025
	0.1
	Створено розділ «Хід роботи»
	3
	27.05.2025
	0.1
	Створено розділ «Опис виконаної роботи»
	4
	27.05.2025
	0.1
	Створено розділ «Висновки»
	5
	27.05.2025
	0.1
	Додано посилання на відеозапис доповіді в додаток А
	

4.3 Хід роботи


        Ця частина системи повинна підтримувати роботу клієнтів у веб-режимі та забезпечувати адміністрування системи.
Користувацький інтерфейс та інтерфейс адміністрування повинні підтримувати інтернаціоналізацію та локалізацію, а саме забезпечувати: підтримку різних кодових таблиць символів, обчислення та формат дати та часу, локальний та універсальний час, метричні одиниці вимірювання, англійську та американську систему мір, порядок сортування текстових значень, різні напрями введення тексту тощо.
Адміністрування системи повинно забезпечувати: управління користувачами системи, управління даними системи, створення резервних копій налаштувань та даних, експорт та імпорт даних та налаштувань, управління сертифікатами тощо.


4.4 Опис виконаної роботи
4.4.1 Технологічний стек та архітектура


        Фронтенд веб-інтерфейсу системи моніторингу ліфтів розроблено з використанням сучасних технологій та бібліотек. Основним фреймворком обрано React.js, який дозволяє створювати інтерактивні та динамічні інтерфейси. Для забезпечення типізації та підвищення надійності коду використана мова TypeScript. Це дозволяє уникнути багатьох помилок на етапі розробки та полегшує підтримку проекту.
Для побудови користувацького інтерфейсу використана бібліотека Material-UI (MUI), яка надає готові компоненти, відповідні принципам Material Design. Для візуалізації даних застосовано бібліотеку Recharts, яка дозволяє створювати різноманітні графіки та діаграми. Інтерактивна карта ліфтів реалізована за допомогою бібліотек Leaflet та React-Leaflet, що забезпечує відображення маркерів ліфтів з різними кольорами залежно від їх статусу.
Керування станом додатка організовано за допомогою Redux Toolkit, який спрощує роботу з глобальним станом та дозволяє ефективно керувати даними. Для маршрутизації між сторінками використано React Router, що забезпечує зручну навігацію та захист роутів. Для взаємодії з бекендом застосовано HTTP-клієнт Axios, який налаштований для роботи з JWT-токенами та обробки помилок.


4.4.2 Основні модулі та сторінки


        Система включає кілька ключових модулів. Автентифікація та авторизація реалізовані через сторінку входу, де користувачі (адміністратори, техніки) можуть увійти до системи. Ролі користувачів визначають їхні права доступу: адміністратори мають повний доступ, тоді як технічний персонал обмежений у діях.
Панель адміністратора дозволяє керувати користувачами (CRUD-операції для адміністраторів, техніків, мешканців), об’єктами (будинки, ліфти) та переглядати журнал активності. Інтерактивна карта ліфтів відображає маркери з різними кольорами (зелений — працює, жовтий — ремонт, червоний — аварія) та попапи з детальною інформацією.
Моніторинг у реальному часі включає дашборд з віджетами, які показують загальну кількість ліфтів, аварій, графіки температури та вологості. Система звітів надає можливість аналізувати аварійні зупинки, тривалість простоїв та інтенсивність використання ліфтів, а також експортувати дані у PDF або Excel.
Налаштування системи дозволяють конфігурувати порогові значення для сенсорів (температура, вологість, вага) та налаштовувати сповіщення через email- або push-повідомлення.

4.4.3 Інтеграція з API


        Для взаємодії з бекендом використано Axios з глобальним інтерцептором, який додає JWT-токени до заголовків запитів та обробляє помилки. Основні ендпоінти включають отримання списку ліфтів, даних сенсорів, порогових значень тощо. Для відображення помилок використано компоненти MUI Snackbar.


4.4.4 Особливості реалізації
        
        Проєкт включає адаптивний дизайн для роботи на різних пристроях, підтримку локалізації українською та англійською через JSON-файли перекладів, а також модульну структуру для зручної підтримки та розширення. Для тестування використано Jest та React Testing Library.


4.5 Висновки
        
Розроблений фронтенд забезпечує зручний та функціональний інтерфейс для моніторингу та керування ліфтами. Використання сучасних технологій та бібліотек дозволило створити продуктивний і масштабований додаток з можливістю подальшого вдосконалення.




ДОДАТОК А
Посилання на відеозапис та хронологічний опис доповіді


Відеозапис доповіді на YouTube: https://youtu.be/oMh75Kg_v50 


00:00 Вступ
00:10 Авторизація
00:35 Головна сторінка адміністратора
00:42 Локалізація
01:05 Інтерактивна карта ліфтів
02:25 Формування звітів та статистика
03:56 Експорт у PDF та Excel
04:20 Панель адміністрування з таблицями
06:05 Налаштування
________________
ДОДАТОК Б
UML-діаграми


  

Рисунок Б.1 — UML-діаграма прецедентів (Use Case Diagram) фронтенду


  

Рисунок Б.2 — UML-діаграма компонентів (Component Diagram)


  

Рисунок Б.3 — UML-діаграма взаємодії (Interaction Overview Diagram


  

Рисунок Б.4.1 — UML-діаграма діяльності (Activity Diagram), частина 1


  

Рисунок Б.4.2 — UML-діаграма діяльності (Activity Diagram), частина 2
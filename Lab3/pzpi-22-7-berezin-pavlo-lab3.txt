Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 3
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури та створення
і відлагодження програмного коду пристрою
інтернету речей (IoT) або розумного пристроя (Smart Device)
програмної системи»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	













Харків, 2025
3.1 Мета роботи


        На лабораторній роботі № 3 необхідно розробити програмне забезпечення для IoT або SmartDevice пристрою, реалізованого на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded System).


3.2 Історія змін


Таблиця 1 — Історія змін та виправлень роботи
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	26.05.2025
	0.1
	Створено розділ «Історія змін»
	2
	26.05.2025
	0.1
	Створено розділ «Хід роботи»
	3
	26.05.2025
	0.1
	Створено розділ «Опис виконаної роботи»
	4
	26.05.2025
	0.1
	Створено розділ «Висновки»
	5
	27.05.2025
	0.1
	Додано посилання на відеозапис доповіді в додаток А
	

        
3.3 Хід роботи
        
Пристрій повинен бути частиною програмної системи і повинен взаємодіяти з нею. Програмне забезпечення повинно реалізовувати розширену функціональність, що відповідає концепції IoT або SmartDevice, та забезпечувати взаємодію з іншими частинами системи.
Протоколи взаємодії мають відповідати сучасним вимогам до IoT або SmartDevice.
Для реалізації програмного забезпечення можна використовувати будь-які придатні для реалізації програмного забезпечення для вбудованих систем технології.


3.4 Опис виконаної роботи
        
        Архітектура IoT-клієнта побудована на основі модульного підходу, що дозволяє розподіляти функціональність між окремими компонентами. Основними складовими є графічний інтерфейс користувача, симулятор даних сенсорів та протокол клієнт-серверної взаємодії. Графічний інтерфейс відповідає за зручну взаємодію з користувачем, дозволяє налаштовувати параметри, такі як формат дати, часова зона та система мір, а також управляти симуляцією і відслідковувати аварійні стани. Симулятор даних генерує випадкові показники сенсорів, включаючи температуру, вологість, вагу і стан ліфта. Протокол взаємодії з сервером використовує REST API, побудований на бібліотеці requests, забезпечуючи передачу даних у реальному часі.
IoT-клієнт взаємодіє із сервером через REST API, дотримуючись стандартів передачі даних. Використовується формат JSON, що забезпечує універсальність і зручність. Перед відправкою дані проходять валідацію для гарантії їхньої коректності. Для взаємодії застосовуються стандартні HTTP-методи, зокрема POST для надсилання даних.
Бізнес-логіка IoT-клієнта включає математичну обробку даних для аналізу стану ліфта та генерації критичних подій. Показники сенсорів: температура, вологість і вага — аналізуються на відповідність встановленим порогам. У разі перевищення цих значень або виявлення аварійного стану генерується подія типу critical, тоді як у штатному режимі створюються події normal.
Особливу увагу приділено обробці аварійних станів. Наприклад, у разі відсутності живлення показники сенсорів припиняють оновлюватися, а у логах фіксується відповідна подія. Якщо ліфт застрягає, його рух припиняється, а стан відмічається як аварійний. У разі перевищення ваги надсилається сигнал на сервер для реєстрації події.
Функції налаштування включають підтримку локалізації з двома мовами: англійською та українською. Інтерфейсні тексти зберігаються у словнику. Формат дати й часу та система мір можна налаштовувати відповідно до локальних потреб.
Інженерні підходи реалізовані через модульність структури, обробку винятків та тестованість компонентів. Логіка програми розділена на модулі, такі як ui, sensors, protocols, та localization, що полегшує її розширення й підтримку. Обробка винятків забезпечує стабільну роботу навіть у разі помилок користувача або проблем із з’єднанням. Розробка здійснювалась із врахуванням можливості модульного тестування.
Запропоновані рішення мають низку переваг. Зручний інтерфейс спрощує використання, гнучкість дозволяє змінювати налаштування без модифікації коду, а масштабованість забезпечує легке додавання нових функцій. Завдяки обробці винятків і перевірці даних клієнт характеризується високою стабільністю.




































Рисунок 3.1 — UML-діаграма прецедентів ІоТ клієнта  




  



Рисунок 3.2 — UML-діаграма діяльності ІоТ-клієнта


  

Рисунок 3.3 — UML-діаграма взаємодії (Interaction Overview Diagram


  

Рисунок 3.4 — UML-діаграма станів (State Diagram)


        
3.5 Висновки
Під час виконання лабораторної роботи було розроблено IoT-клієнт з імітацією праці ліфтів та пов’язаних з ними датчиків. Прийняті рішення забезпечують відповідність сучасним вимогам до IoT-клієнтів і дозволяють легко інтегрувати пристрій у більші програмні системи.
________________
ДОДАТОК А
Посилання на відеозапис та хронологічний опис доповіді


Відеозапис доповіді на YouTube: https://youtu.be/KCnfY1hpvUk 
0:00 Вступ (запуск IoT-клієнта)
0:14 Пояснення до інтерфейсу
1:52 Тестування розрахувань
3:51 Тестування змінення подій
4:40 Тестування налаштування вигляду даних
________________
ДОДАТОК Б
Фрагмент коду, пов’язаного з бізнес-логікою IoT-клієнта


  1. import random
  2. from datetime import datetime
  3. from .settings import SETTINGS, UNIT_SYSTEMS
  4.
  5. class SensorSimulator:
  6.     def __init__(self):
  7.         self.temperature = 25.0
  8.         self.humidity = 50.0
  9.         self.weight = 0.0
 10.         self.current_floor = 1
 11.         self.is_power_on = True
 12.         self.is_moving = False
 13.         self.is_stuck = False
 14.         self.tempetature_min = -0.5
 15.         self.temperature_max = 0.5
 16.         self.humidity_min = -1.0
 17.         self.humidity_max = 1.0
 18.
 19.     def update_simulation_params(self, tempetature_min, temperature_max,
 20.                                  humidity_min, humidity_max, weight):
 21.         """Оновлення параметрів симуляції."""
 22.         self.tempetature_min = tempetature_min
 23.         self.temperature_max = temperature_max
 24.         self.humidity_min = humidity_min
 25.         self.humidity_max = humidity_max
 26.         self.weight = weight
 27.
 28.     def generate_data(self):
 29.         """Генерує випадкові дані для сенсорів"""
 30.         unit_system = UNIT_SYSTEMS[SETTINGS['unit_system']]
 31.         #date_format = SETTINGS['date_format']
 32.
 33.         if self.is_power_on:
 34.             self.temperature += random.uniform(self.tempetature_min, self.temperature_max)
 35.             self.humidity += random.uniform(self.humidity_min, self.humidity_max)
 36.             self.humidity = min(self.humidity, 100)
 37.
 38.             if self.is_moving and not self.is_stuck:
 39.                 self.current_floor += 1 if random.random() > 0.5 else -1
 40.                 self.current_floor = max(1, self.current_floor)
 41.
 42.             return {
 43.                 "temperature": round(self.temperature, 2),
 44.                 "humidity": round(self.humidity, 2),
 45.                 "weight": round(self.weight, 2),
 46.                 "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
 47.                 "current_floor": self.current_floor,
 48.                 "is_moving": self.is_moving,
 49.                 "is_power_on": self.is_power_on,
 50.                 "is_stuck": self.is_stuck
 51.             }
 52.         else:
 53.             return {
 54.                 "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
 55.                 "is_stuck": self.is_moving,
 56.                 "is_power_on": self.is_power_on,
 57.                 "is_moving": False
 58.             }
________________


ДОДАТОК В
Фрагмент коду, пов’язаного з налаштуванням IoT-клієнта


  1. import tkinter as tk
  2. from tkinter import ttk
  3. from .sensors import SensorSimulator
  4. from .protocols import ServerClient
  5. from .localization import LANGUAGES
  6. from .settings import SETTINGS, UNIT_SYSTEMS
  7. from datetime import datetime
  8.
  9. class IoTClientApp:
 10.     def __init__(self, root):
 11.         self.root = root
 12.         self.language = 'uk'
 13.         self.texts = LANGUAGES[self.language]
 14.
 15.         self.root.title(self.texts['title'])
 16.         self.simulator = SensorSimulator()
 17.         self.client = ServerClient("http://127.0.0.1:5000")
 18.
 19.         self.setup_ui()
 20.
 21.     def switch_language(self, lang):
 22.         """Перемикання мови інтерфейсу"""
 23.         self.language = lang
 24.         self.texts = LANGUAGES[self.language]
 25.         self.refresh_ui()
 26.
 27.     def refresh_ui(self):
 28.         """Оновлює текст інтерфейсу для поточної мови"""
 29.         self.root.title(self.texts['title'])
 30.         self.server_url_label.config(text=self.texts['server_url'])
 31.         self.elevator_id_label.config(text=self.texts['elevator_id'])
 32.         self.start_button.config(text=self.texts['start_simulation'])
 33.         self.stop_button.config(text=self.texts['stop_simulation'])
 34.         #self.control_panel_label.config(text=self.texts['control_panel'])
 35.         self.power_button.config(text=self.texts['toggle_power'])
 36.         self.stuck_button.config(text=self.texts['toggle_stuck'])
 37.         self.move_button.config(text=self.texts['toggle_move'])
 38.         self.settings_label.config(text=self.texts['settings'])
 39.         self.date_format_label.config(text=self.texts['date_format'])
 40.         self.time_zone_label.config(text=self.texts['time_zone'])
 41.         self.unit_system_label.config(text=self.texts['unit_system'])
 42.         self.save_settings_button.config(text=self.texts['save_settings'])
 43.         self.temp_min_label.config(text=self.texts['temperature_min'])
 44.         self.temp_max_label.config(text=self.texts['temperature_max'])
 45.         self.hum_min_label.config(text=self.texts['humidity_min'])
 46.         self.hum_max_label.config(text=self.texts['humidity_max'])
 47.         self.fixed_weight_label.config(text=self.texts['weight'])
 48.         self.apply_simulation_params_button.config(text=self.texts['apply_simulation_params'])
 49.
 50.     def setup_ui(self):
 51.         """Налаштування графічного інтерфейсу"""
 52.         frame = ttk.Frame(self.root, padding=10)
 53.         frame.grid(row=0, column=0, sticky=(tk.W, tk.E))
 54.
 55.         # Вибір мови
 56.         language_frame = ttk.Frame(frame)
 57.         language_frame.grid(row=0, column=0, sticky=tk.W, columnspan=2)
 58.         ttk.Button(language_frame, text="EN", command=lambda: self.switch_language('en')).grid(row=0, column=0, padx=5)
 59.         ttk.Button(language_frame, text="UK", command=lambda: self.switch_language('uk')).grid(row=0, column=1, padx=5)
 60.
 61.         self.auth_frame = ttk.Frame(frame, padding=10)
 62.         self.auth_frame.grid(row=1, column=0, columnspan=2, sticky=tk.W)
 63.         ttk.Label(self.auth_frame, text="Admin Email:").grid(row=0, column=0, sticky=tk.W)
 64.         self.email_entry = ttk.Entry(self.auth_frame, width=20)
 65.         self.email_entry.grid(row=0, column=1, sticky=tk.W)
 66.
 67.         ttk.Label(self.auth_frame, text="Password:").grid(row=1, column=0, sticky=tk.W)
 68.         self.password_entry = ttk.Entry(self.auth_frame, width=20, show="*")
 69.         self.password_entry.grid(row=1, column=1, sticky=tk.W)
 70.
 71.         self.auth_button = ttk.Button(self.auth_frame, text="Login", command=self.authenticate)
 72.         self.auth_button.grid(row=2, column=1, sticky=tk.W)
 73.
 74.         # Поле введення URL сервера
 75.         self.server_url_label = ttk.Label(frame, text=self.texts['server_url'])
 76.         self.server_url_label.grid(row=3, column=0, sticky=tk.W)
 77.         self.url_entry = ttk.Entry(frame, width=40)
 78.         self.url_entry.insert(0, "http://127.0.0.1:5000")
 79.         self.url_entry.grid(row=3, column=1, sticky=tk.W)
 80.
 81.         # Поле введення Elevator ID
 82.         self.elevator_id_label = ttk.Label(frame, text=self.texts['elevator_id'])
 83.         self.elevator_id_label.grid(row=4, column=0, sticky=tk.W)
 84.         self.elevator_id_entry = ttk.Entry(frame, width=10)
 85.         self.elevator_id_entry.grid(row=4, column=1, sticky=tk.W)
 86.
 87.         # Налаштування
 88.         self.settings_label = ttk.Label(frame, text=self.texts['settings'])
 89.         self.settings_label.grid(row=5, column=0, sticky=tk.W)
 90.
 91.         # Вибір формату дати
 92.         self.date_format_label = ttk.Label(frame, text=self.texts['date_format'])
 93.         self.date_format_label.grid(row=6, column=0, sticky=tk.W)
 94.         self.date_format_entry = ttk.Entry(frame, width=20)
 95.         self.date_format_entry.insert(0, SETTINGS['date_format'])
 96.         self.date_format_entry.grid(row=6, column=1, sticky=tk.W)
 97.
 98.         # Група для Time Zone, Unit System і Save Settings
 99.         settings_row_frame = ttk.Frame(frame)
100.         settings_row_frame.grid(row=5, column=0, columnspan=2, sticky=tk.W)
101.
102.         # Вибір часової зони
103.         self.time_zone_label = ttk.Label(settings_row_frame, text=self.texts['time_zone'])
104.         self.time_zone_label.grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
105.         self.time_zone_var = tk.StringVar(value=SETTINGS['time_zone'])
106.         ttk.OptionMenu(settings_row_frame, self.time_zone_var, SETTINGS['time_zone'], "local", "UTC").grid(row=0, column=1, sticky=tk.W)
107.
108.         # Вибір системи мір
109.         self.unit_system_label = ttk.Label(settings_row_frame, text=self.texts['unit_system'])
110.         self.unit_system_label.grid(row=0, column=2, sticky=tk.W, padx=(10, 5))
111.         self.unit_system_var = tk.StringVar(value=SETTINGS['unit_system'])
112.         ttk.OptionMenu(settings_row_frame, self.unit_system_var, SETTINGS['unit_system'], "metric", "imperial").grid(row=0, column=3, sticky=tk.W)
113.
114.         # Кнопка для збереження налаштувань
115.         self.save_settings_button = ttk.Button(settings_row_frame, text=self.texts['save_settings'], command=self.save_settings)
116.         self.save_settings_button.grid(row=0, column=4, sticky=tk.W, padx=(10, 0))
117.
118.         # Кнопка для запуску симуляції
119.         self.start_button = ttk.Button(frame, text=self.texts['start_simulation'], command=self.start_simulation)
120.         self.start_button.grid(row=7, column=0, sticky=tk.W)
121.
122.         # Кнопка для зупинки симуляції
123.         self.stop_button = ttk.Button(frame, text=self.texts['stop_simulation'], command=self.stop_simulation, state=tk.DISABLED)
124.         self.stop_button.grid(row=7, column=1, sticky=tk.W)
125.
126.         # Фрейм для кнопок
127.         control_buttons_frame = ttk.Frame(frame)
128.         control_buttons_frame.grid(row=8, column=0, columnspan=3, sticky=(tk.W, tk.E))
129.
130.         # Кнопки управління аварійними ситуаціями
131.         self.power_button = ttk.Button(control_buttons_frame, text=self.texts['toggle_power'], command=self.toggle_power)
132.         self.power_button.grid(row=0, column=0, padx=5, pady=2)
133.
134.         self.stuck_button = ttk.Button(control_buttons_frame, text=self.texts['toggle_stuck'], command=self.toggle_stuck)
135.         self.stuck_button.grid(row=0, column=1, padx=5, pady=2)
136.
137.         self.move_button = ttk.Button(control_buttons_frame, text=self.texts['toggle_move'], command=self.toggle_move)
138.         self.move_button.grid(row=0, column=2, padx=5, pady=2)
139.
140.         # Розтягування кнопок по горизонталі
141.         control_buttons_frame.columnconfigure(0, weight=1)
142.         control_buttons_frame.columnconfigure(1, weight=1)
143.         control_buttons_frame.columnconfigure(2, weight=1)
144.
145.         # Поля для налаштування параметрів генерації
146.         self.temp_min_label = ttk.Label(frame, text=self.texts['temperature_min'])
147.         self.temp_min_label.grid(row=9, column=0, sticky=tk.W)
148.         self.temp_min_entry = ttk.Entry(frame, width=10)
149.         self.temp_min_entry.insert(0, "-0.5")
150.         self.temp_min_entry.grid(row=9, column=1, sticky=tk.W)
151.
152.         self.temp_max_label = ttk.Label(frame, text=self.texts['temperature_max'])
153.         self.temp_max_label.grid(row=9, column=2, sticky=tk.W)
154.         self.temp_max_entry = ttk.Entry(frame, width=10)
155.         self.temp_max_entry.insert(0, "0.5")
156.         self.temp_max_entry.grid(row=9, column=3, sticky=tk.W)
157.
158.         self.hum_min_label = ttk.Label(frame, text=self.texts['humidity_min'])
159.         self.hum_min_label.grid(row=10, column=0, sticky=tk.W)
160.         self.hum_min_entry = ttk.Entry(frame, width=10)
161.         self.hum_min_entry.insert(0, "-1.0")
162.         self.hum_min_entry.grid(row=10, column=1, sticky=tk.W)
163.
164.         self.hum_max_label = ttk.Label(frame, text=self.texts['humidity_max'])
165.         self.hum_max_label.grid(row=10, column=2, sticky=tk.W)
166.         self.hum_max_entry = ttk.Entry(frame, width=10)
167.         self.hum_max_entry.insert(0, "1.0")
168.         self.hum_max_entry.grid(row=10, column=3, sticky=tk.W)
169.
170.         self.fixed_weight_label = ttk.Label(frame, text=self.texts['weight'])
171.         self.fixed_weight_label.grid(row=11, column=0, sticky=tk.W)
172.         self.fixed_weight_entry = ttk.Entry(frame, width=10)
173.         self.fixed_weight_entry.insert(0, "0.0")
174.         self.fixed_weight_entry.grid(row=11, column=1, sticky=tk.W)
175.
176.         self.apply_simulation_params_button = ttk.Button(frame, text=self.texts['apply_simulation_params'],
177.                                                          command=self.apply_simulation_params)
178.         self.apply_simulation_params_button.grid(row=12, column=2, sticky=tk.W)
179.
180.         # Поле для виводу відправлених даних
181.         self.log_text = tk.Text(self.root, height=15, width=60, state=tk.DISABLED)
182.         self.log_text.grid(row=13, column=0, columnspan=2, padx=10, pady=10)
183.
184.     def save_settings(self):
185.         """Зберігає налаштування"""
186.         SETTINGS['date_format'] = self.date_format_entry.get()
187.         SETTINGS['time_zone'] = self.time_zone_var.get()
188.         SETTINGS['unit_system'] = self.unit_system_var.get()
189.         self.log(f"Settings updated: {SETTINGS}")
190.
191.     def log(self, message):
192.         """Додає повідомлення до логів"""
193.         self.log_text.config(state=tk.NORMAL)
194.         self.log_text.insert(tk.END, f"{message}\n")
195.         self.log_text.config(state=tk.DISABLED)
196.         self.log_text.see(tk.END)
197.
198.     def start_simulation(self):
199.         """Запуск симуляції роботи сенсорів"""
200.         if not self.client.token:
201.             self.log("Error: Please authenticate before starting the simulation.")
202.             return
203.         self.simulating = True
204.         self.client.base_url = self.url_entry.get()
205.         self.log(self.texts['simulation_started'])
206.         self.start_button.config(state=tk.DISABLED)
207.         self.stop_button.config(state=tk.NORMAL)
208.         self.simulate()
209.
210.     def stop_simulation(self):
211.         """Зупинка симуляції роботи сенсорів"""
212.         self.simulating = False
213.         self.log(self.texts['simulation_stopped'])
214.         self.start_button.config(state=tk.NORMAL)
215.         self.stop_button.config(state=tk.DISABLED)
216.
217.     def simulate(self):
218.         """Симуляція даних сенсорів і відправка їх на сервер"""
219.         if self.simulating:
220.             data = self.simulator.generate_data()
221.
222.             # Перетворення формату рядка
223.             date_format = SETTINGS['date_format']
224.             timestamp = datetime.strptime(data['timestamp'], "%Y-%m-%d %H:%M:%S")
225.             timestamp = timestamp.strftime(date_format)
226.
227.             # Отримати elevator_id з інтерфейсу
228.             try:
229.                 elevator_id = int(self.elevator_id_entry.get())
230.                 data["elevator_id"] = elevator_id
231.             except ValueError:
232.                 self.log(self.texts['invalid_elevator_id'])
233.                 self.stop_simulation()
234.                 return
235.
236.             # Конвертація одиниць вимірювання для виводу
237.             if "temperature" in data and "humidity" in data and "weight" in data:
238.                 converted_data = {
239.                     "temperature": f"{round(data['temperature'] * 9/5 + 32, 2)} °F" if SETTINGS['unit_system'] == "imperial" else f"{data['temperature']} °C",
240.                     "humidity": f"{data['humidity']} %",
241.                     "weight": f"{round(data['weight'] * 2.20462, 2)} lbs" if SETTINGS['unit_system'] == "imperial" else f"{data['weight']} kg",
242.                     "timestamp": timestamp,
243.                     "current_floor": data["current_floor"],
244.                     "is_moving": data["is_moving"],
245.                     "is_power_on": data["is_power_on"],
246.                     "is_stuck": data["is_stuck"],
247.                 }
248.                 self.log(f"{self.texts['sent']}: {converted_data}")
249.             else:
250.                 converted_data = {
251.                     "timestamp": timestamp,
252.                     "is_power_on": data["is_power_on"],
253.                     "is_moving": data["is_moving"],
254.                     "is_stuck": data["is_stuck"],
255.                 }
256.                 self.log(f"{self.texts['sent']}: {converted_data}")
257.             # Надсилання даних
258.             response = self.client.send_sensor_data(data)
259.             self.log(f"{self.texts['response']}: {response}")
260.             self.root.after(1000, self.simulate) # Повторювати кожну секунду
261.
262.     def log(self, message):
263.         """Додає повідомлення до логів"""
264.         self.log_text.config(state=tk.NORMAL)
265.         self.log_text.insert(tk.END, f"{message}\n")
266.         self.log_text.config(state=tk.DISABLED)
267.         self.log_text.see(tk.END)
268.
269.     def toggle_power(self):
270.         """Перемикає стан живлення"""
271.         self.simulator.is_power_on = not self.simulator.is_power_on
272.         state = self.texts['state_on'] if self.simulator.is_power_on else self.texts['state_off']
273.         self.log(self.texts['power_toggled'].format(state=state))
274.
275.     def toggle_stuck(self):
276.         """Перемикає стан застрягання"""
277.         self.simulator.is_stuck = not self.simulator.is_stuck
278.         state = self.texts['state_stuck'] if self.simulator.is_stuck else self.texts['state_moving_normally']
279.         self.log(self.texts['stuck_toggled'].format(state=state))
280.
281.     def toggle_move(self):
282.         """Перемикає стан руху"""
283.         self.simulator.is_moving = not self.simulator.is_moving
284.         state = self.texts['state_moving'] if self.simulator.is_moving else self.texts['state_stopped']
285.         self.log(self.texts['movement_toggled'].format(state=state))
286.
287.     def apply_simulation_params(self):
288.         """Застосовує нові параметри генерації"""
289.         try:
290.             temperature_min = float(self.temp_min_entry.get())
291.             temperature_max = float(self.temp_max_entry.get())
292.             humidity_min = float(self.hum_min_entry.get())
293.             humidity_max = float(self.hum_max_entry.get())
294.             fixed_weight = float(self.fixed_weight_entry.get())
295.
296.             self.simulator.update_simulation_params(temperature_min,
297.                                                     temperature_max,
298.                                                     humidity_min,
299.                                                     humidity_max,
300.                                                     fixed_weight)
301.             self.log("Simulation parameters updated successfully.")
302.         except ValueError:
303.             self.log("Error: Invalid simulation parameter input.")
304.
305.     def authenticate(self):
306.         """Авторизація адміністратора"""
307.         email = self.email_entry.get()
308.         password = self.password_entry.get()
309.         if not email or not password:
310.             self.log("Error: Email and password are required.")
311.             return
312.
313.         result = self.client.authenticate(email, password)
314.         if result["success"]:
315.             self.log("Authentication successful.")
316.         else:
317.             self.log(f"Authentication failed: {result['message']}")
318.
319.
320. if __name__ == "__main__":
321.     root = tk.Tk()
322.     app = IoTClientApp(root)
323.     root.mainloop()
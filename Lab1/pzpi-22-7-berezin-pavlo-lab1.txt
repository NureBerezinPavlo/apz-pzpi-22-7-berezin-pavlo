Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 1
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка опису прототипу проєкту
в форматі Vision and Scope»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	

















Харків, 2025
1.1 Мета роботи


        Формування навичок розробки та оформлення документації програмного проєкту у форматі Vision & Scope. Це включає опис актуальності та призначення проєкту, аналіз існуючих аналогів, визначення бізнес-логіки системи, функціональних можливостей її компонентів, а також вибір та обґрунтування використання програмних засобів та інструментів для реалізації системи. Мета лабораторної роботи спрямована на розвиток професійних компетенцій у галузі розробки програмних систем, документування проєктів, роботи з сучасними технологіями та ефективного представлення результатів своєї діяльності.


1.2 Історія змін


Таблиця 1 — Історія змін та виправлень роботи
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	22.05.2025
	0.1
	Створено розділ «Історія змін»
	2
	22.05.2025
	0.1
	Створено розділ «Хід роботи»
	3
	22.05.2025
	0.1
	Додано створений Vision & Scope у у додаток Б
	4
	22.05.2025
	0.1
	Створено розділ «Висновки»
	5
	23.05.2025
	0.1
	Додано посилання на відеозапис доповіді в додаток А
	

1.3 Завдання


Вимоги до змісту документу Vision & Scope:
Розділ 1. Описати актуальність проблем, які вирішує програмна система. Описати інші аналогічні рішення, що вирішують ту ж саму проблему, або використовують ті ж самі методи вирішення завдань. Описати способи монетизації проєкту.
Розділ 2. Описати призначення системи, вказати її головні функціональні можливості.
Розділ 3. Докладно описати функції кожної з частин системи та вимоги до цих частин.
Розділ 4. Описати усі зацікавлені у проєкті сторони. Вказати строки виконання проєкту, усі технології, які будуть використані у проєкті.
В цій лабораторній роботі необхідно зміни документ Vision & Scope, який було створено минулого семестру, а саме розділ 3: Scope and Limitations. В цьому розділі необхідно описати:
3.1 Scope of Initial Release — опис скоупу всього проекту разом із серверною частиною, мобільним і вебклієнтами та IoT. Описати роботу всієї системи.
3.2 Scope of Subsequent Releases — продумати, як у майбутніх релізах інтегрувати штучний інтелект. Треба описати 3 ключові аспекти роботи з ШІ:
* застосування — як ШІ може покращити роботу системи;
* збирання даних — які дані і яким чином можна збирати для подальшого навчання моделей;
* навчання/використання — чи треба навчати модель самостійно, донавчати існуючу, використовувати готовий API сервісу ШІ. Продумати, як краще за все використати дані, які можна збирати.
3.3 Limitations and Exclusions — з описаного функціоналу (з обох попередніх пунктів), які неочевидні обмеження. Який функціонал міг би бути присутній у системі, ал навмисно виключений і чому.


1.4 Опис виконаної роботи
        
        У ході виконання лабораторної роботи було проведено оновлення документа Vision & Scope для програмної системи моніторингу та обслуговування ліфтів у житлових комплексах. Основну увагу було приділено розділу 3 (Scope and Limitations), де детально описані рамки первинного випуску системи, плани щодо майбутніх релізів, а також обмеження та виключення. Для первинного випуску було розроблено архітектуру системи, яка включає серверну частину на основі Flask, IoT-компоненти для збору даних, вебклієнт для адміністраторів та мобільні додатки для мешканців і технічного персоналу. Також було проаналізовано можливості інтеграції штучного інтелекту в майбутніх релізах, зокрема для прогностичного обслуговування, оптимізації роботи ліфтів та розпізнавання аварійних ситуацій. Визначено технічні та функціональні обмеження системи, такі як залежність від якості даних датчиків, відсутність повної автономності ремонту та обмежена підтримка старих моделей ліфтів. Уся робота була виконана з урахуванням вимог до документації та професійних стандартів.
        
1.5 Висновки
        
        Виконання лабораторної роботи дозволило поглибити навички розробки та оформлення документації програмного проєкту у форматі Vision & Scope, визначення чітких рамок проєкту, аналізу можливостей для майбутнього розвитку системи та обґрунтування обмежень. Робота над розділом Scope and Limitations показала важливість балансу між функціональністю, технічною реалізацією та бізнес-вимогами. Інтеграція штучного інтелекту, запланована для майбутніх релізів, відкриває нові перспективи для покращення ефективності системи. Отримані результати підтверджують готовність до подальшої роботи над проєктом, включаючи впровадження нових технологій та адаптацію до змін у галузі програмного забезпечення.
________________


ДОДАТОК А
Посилання на відеозапис та хронологічний опис доповіді


Відеозапис доповіді на YouTube: https://youtu.be/SxdC8JNtZro 


00:00 Вступ
00:39 3.1 Scope of Initial Release (Рамки первинного випуску)
05:46 3.2 Scope of Subsequent Releases (Рамки наступних випусків)
10:10 3.3 Limitations and Exclusions (Обмеження та виключення)
________________


ДОДАТОК Б
Vision and Scope Document


Vision and Scope Document
for
Програмна система для масового обслуговування та моніторингу стану ліфтів в житлових комплексах
Version 1.0 approved
Prepared by ст. гр. ПЗПІ-22-7
Березін Павло
07.12.2024


Зміст


1.        Business Requirements        3
1.1.        Background        3
1.2.        Business Opportunity        4
2.        Vision of the Solution        5
2.1.        Vision Statement        5
2.2.        Major Features        6
3.        Scope and Limitations        8
3.1.        Scope of Initial Release        8
3.2.        Scope of Subsequent Releases        11
3.3 Limitations and Exclusions        14
4.        Business Context        17
4.3.        Operating Environment        17








Revision History


Name
	Date
	Reason For Changes
	Version
	Березін Павло
	07.12.2024
	

	1.0.0
	Березін Павло
	12.05.2025
	

	1.0.1
	

1 BUSINESS REQUIREMENTS (БІЗНЕС-ВИМОГИ)
1.1. Background (Передумови)


В умовах сучасного урбаністичного розвитку ефективне управління багатоквартирними житловими комплексами набуває дедалі більшої актуальності. Ліфтові системи, як ключовий елемент інфраструктури таких будівель, значно впливають на комфорт, безпеку та загальну ефективність житлового простору. Проте значна частина обладнання в житлових комплексах застаріла або експлуатується з порушеннями технічних регламентів. Це призводить до підвищеної аварійності, довготривалого часу простою та створює загрози для життя й здоров’я мешканців.
Сучасні системи моніторингу ліфтів часто базуються на застарілих технологіях, що не дозволяють здійснювати моніторинг у реальному часі, оперативно реагувати на несправності або здійснювати автоматизоване технічне обслуговування. Відсутність інтеграції з IoT-рішеннями ускладнює обробку даних, аналіз стану обладнання та планування ремонтних робіт.
Крім того, зі зростанням кількості житлових комплексів підвищується потреба у централізованому управлінні та оптимізації витрат на технічне обслуговування. Традиційні підходи до експлуатації ліфтів не забезпечують достатнього рівня автоматизації процесів, що негативно впливає на експлуатаційні витрати та довговічність обладнання.
Запропонована програмна система спрямована на вирішення таких ключових проблем:
* Відсутність прозорості у функціонуванні ліфтових систем.
* Низька ефективність діагностики та профілактичного обслуговування.
* Довготривалі простої через невчасну реакцію на аварійні ситуації.
* Недостатня інтеграція системи моніторингу з мобільними додатками для сповіщення мешканців і технічного персоналу.


1.2. Business Opportunity (Бізнес-можливості)


На ринку систем моніторингу та управління ліфтами для житлових комплексів представлені різні рішення, які забезпечують схожий функціонал. Серед них можна виділити продукти компаній Tiandy, ODC (Одеса-ліфт) та LIDS-Lift.
Компанія Tiandy спеціалізується на системах контролю доступу до ліфтів, які інтегруються з генераторами та іншими системами безпеки. Основний функціонал включає обмеження доступу до ліфтів за допомогою RFID-карт. Проте ці системи не забезпечують широких можливостей для моніторингу стану ліфтів чи інтеграції з IoT.
ODC пропонує рішення для дистанційного моніторингу та диспетчеризації ліфтів. Основний акцент зроблено на облік аварійних подій та діагностику технічного стану. Однак системи ODC не використовують алгоритми автоматизації аналізу даних і значною мірою залежні від локальних серверів, що ускладнює масштабування.
LIDS-Lift забезпечує комплексну диспетчеризацію ліфтів із можливістю інтеграції з ERP-системами. Ці рішення орієнтовані на аналіз роботи ліфтів для планування технічного обслуговування. Проте їхнє впровадження є доволі дорогим, а можливості інтеграції з іншими розумними пристроями обмежені.
Ринок систем управління ліфтами має значний потенціал для впровадження нових продуктів, які поєднують сучасні IoT-технології, хмарну інфраструктуру та автоматизацію. Запропонований продукт вирішує низку актуальних проблем, серед яких низький рівень моніторингу стану обладнання, відсутність прогнозування технічного обслуговування та недостатня інтеграція з іншими компонентами «розумного будинку». Продукт відповідає ринковим тенденціям, зокрема зростанню популярності розумних пристроїв, і має потенціал для значного підвищення ефективності управління ліфтами у багатоквартирних будинках.


2 VISION OF THE SOLUTION (КОНЦЕПЦІЯ РІШЕННЯ)
2.1. Vision Statement (Окреслення концепції)


Програмний продукт «Програмна система для масового обслуговування та моніторингу стану ліфтів у житлових комплексах» є інноваційним рішенням, яке спрямоване на забезпечення безперервної, ефективної та безпечної роботи ліфтового обладнання. Система поєднує в собі сучасні IoT-технології, мобільні додатки та централізовану серверну архітектуру для збору, аналізу і візуалізації даних про роботу ліфтів у реальному часі.
Головною метою продукту є автоматизація моніторингу ліфтових систем і оптимізація їхнього технічного обслуговування. Система створена для:
* Зниження простоїв і оперативного реагування на аварійні ситуації.
* Підвищення рівня безпеки мешканців житлових комплексів.
* Покращення умов експлуатації ліфтів завдяки аналізу даних і попередженню несправностей.
* Зменшення витрат на технічне обслуговування через оптимізацію ресурсів.
Система виконує кілька ключових функцій:
* Моніторинг у реальному часі: забезпечується безперервне отримання даних із датчиків, встановлених у ліфтових шахтах і кабінах.
* Автоматичне сповіщення: технічний персонал і мешканці отримують миттєві повідомлення про аварії, несправності чи перевантаження.
* Аналітика та планування: система формує звіти та надає рекомендації щодо проведення профілактичних і ремонтних робіт.
* Мобільний доступ: інтегрований мобільний додаток дозволяє зручно взаємодіяти з системою як мешканцям, так і технічним працівникам.
Таким чином, система сприяє підвищенню ефективності управління ліфтами в житлових комплексах, забезпечуючи комфорт, надійність і економічність.


2.2. Major Features (Головна функціональність)


Нижче наведено основні функціональні можливості програмного продукту, розроблені для задоволення потреб користувачів:
1. MF-1: Моніторинг у реальному часі.
* Відстеження стану ліфтів за допомогою датчиків руху, зупинок, перевантаження, температури та вологості.
* Відображення поточного стану ліфтів у централізованій панелі управління.
2. MF-2: Система сповіщень.
* Автоматичне надсилання технічному персоналу сповіщень про несправності, аварійні ситуації чи необхідність технічного обслуговування.
* Сповіщення мешканців про статус ліфта, затримки або час завершення ремонту.
3. MF-3: Формування звітів та аналітика.
* Генерація історичних звітів щодо роботи ліфтів, включно з аварійними зупинками, тривалістю простоїв та інтенсивністю використання.
* Виявлення повторюваних несправностей і надання рекомендацій для їх усунення.
4. MF-4: Інтерактивна карта технічного стану ліфтів.
* Відображення стану кожного ліфта на інтерактивній карті, доступній для адміністративного персоналу.
* Можливість перегляду активних аварійних сигналів і статусів технічного обслуговування.
5. MF-5: Мобільний додаток для мешканців.
* Перегляд у реальному часі статусу ліфта, виклик технічної служби у разі аварійної ситуації.
* Виклик екстрених служб із додатка у разі застрягання.
6. MF-6: Мобільний додаток для технічного персоналу.
* Доступ до журналів несправностей та історії ремонту кожного ліфта.
* Оперативний моніторинг стану обладнання та можливість віддаленої перевірки.
7. MF-7: Інтеграція із сервісними службами.
* Автоматичне формування заявок на ремонтні роботи в разі виявлення критичних несправностей.
* Інтеграція з CRM-системами для управління запитами та ресурсами.
8. MF-8: Налаштування системи.
* Можливість задавати параметри роботи датчиків, періодичність збору даних та критичні значення для активації аварійних сповіщень.
Ця функціональність забезпечує зручний доступ до даних і контроль за станом ліфтів, допомагаючи зменшити час простою, знизити витрати на обслуговування та підвищити безпеку для користувачів.
3 SCOPE AND LIMITATIONS (РАМКИ ТА ОБМЕЖЕННЯ ПРОДУКТУ)
3.1. Scope of Initial Release (Рамки первинного випуску)


Перший випуск програмної системи для масового обслуговування та моніторингу стану ліфтів у житлових комплексах охоплює повний цикл функціонування, включаючи серверну частину, IoT-компоненти, вебклієнт та мобільний додаток. Система забезпечує моніторинг у реальному часі, автоматичне сповіщення, інтеграцію з сервісними службами та базову аналітику. Нижче наведено детальний опис компонентів та їх взаємодії.
Серверна частина:
* Обробка даних. Серверна частина, розроблена на основі Flask, забезпечує збір, обробку та зберігання даних від IoT-сенсорів. Дані передаються через захищені протоколи (MQTT/HTTP) і зберігаються в Microsoft SQL Server. Сервер аналізує інформацію у реальному часі, виявляючи аномалії (наприклад, перевантаження, підвищення температури) та ініціюючи відповідні дії.
* API для клієнтів. Реалізовано REST API для взаємодії з вебклієнтом та мобільним додатком. API надає доступ до даних про стан ліфтів, історію несправностей, а також функціонал для керування сповіщеннями та заявками на ремонт.
* Система сповіщень. У разі виявлення критичних ситуацій сервер автоматично надсилає сповіщення технічному персоналу та мешканцям через мобільний додаток. Повідомлення включають деталі інциденту та рекомендовані дії.
* Інтеграція з CRM. Система інтегрується з CRM-системами для автоматичного формування заявок на ремонт та управління ресурсами.
IoT-компоненти:
* Датчики. Система використовує наступні сенсори:
   * датчики руху та зупинок для відстеження переміщень ліфта,
   * датчики перевантаження для контролю маси в кабіні,
   * сенсори температури та вологості для моніторингу умов у ліфтовій шахті,
   * аварійні датчики для фіксації критичних ситуацій (наприклад, застрягання.
* Протоколи зв’язку. Дані передаються на сервер через MQTT або HTTP, що забезпечує швидкість та надійність зв’язку.
        Вебклієнт:
* Панель адміністратора. Вебінтерфейс, розроблений з використанням HTML, CSS та JavaScript (з можливим застосуванням React.js), надає інструменти для керування системою:
   * додавання, редагування та видалення облікових записів користувачів,
   * налаштування прав доступу для різних груп (адміністратори, технічний персонал, мешканці),
   * перегляд журналу активності для відстеження дій користувачів.
* Інтерактивна карта ліфтів. Інтерактивна карта відображає поточний стан ліфтів у будівлі, включаючи активні аварії та попередження. Фільтрація за статусом дозволяє швидко ідентифікувати проблемні зони.
* Базова аналітика. Генеруються звіти про аварійні зупинки, тривалість простоїв та інтенсивність використання ліфтів. Дані можна експортувати у формати PDF або Excel.
        Мобільний додаток:
* Для мешканців. Додаток, розроблений на Kotlin у Android Studio, надає наступні функції:
   * перегляд статусу ліфта у реальному часі («у роботі», «на ремонті», «застряг»),
   * швидкий виклик аварійної служби або технічного персоналу,
   * отримання сповіщень про технічні роботи або аварії.
* Для технічного персоналу функціонал включає:
   * доступ до історії несправностей з деталізацією причин та виконаних робіт,
   * миттєві сповіщення про нові аварії,
   * можливість оновлення статусу ліфта після ремонту.
* Додаток інтегрується з сервером через REST API, забезпечуючи синхронізацію даних у реальному часі.
        Захист даних та безпека:
* Усі передані та збережені дані шифруються з використанням сучасних алгоритмів. Для передачі даних використовується протокол HTTPS.
* Реалізовано двофакторну автентифікацію (2FA) для захисту доступу до системи.
* Система відповідає вимогам GDPR та інших нормативних актів щодо захисту персональних даних.
* Дані регулярно архівуються з можливістю налаштування політик зберігання.
        Перший випуск системи забезпечує повний функціонал для моніторингу, діагностики та оперативного реагування на несправності ліфтів. Він включає серверну частину, IoT-сенсори, вебклієнт для адміністраторів та мобільний додаток для мешканців і технічного персоналу. Система сприяє зниженню простоїв, підвищенню безпеки та оптимізації витрат на обслуговування.


3.2 Scope of Subsequent Releases (Рамки наступних випусків)


У майбутніх релізах планується інтеграція штучного інтелекту (ШІ) для покращення ефективності системи моніторингу та обслуговування ліфтів. Штучний інтелект може бути використаний у таких напрямках:
* Прогностичне обслуговування (Predictive Maintenance):
   * Аналіз даних від датчиків (вібрації, температури, навантаження) для виявлення аномалій та передбачення можливих поломок.
   * Рекомендації щодо профілактичного ремонту до виникнення критичних несправностей.
* Оптимізація роботи ліфтів:
   * Аналіз патернів використання (навантаження, час пікового навантаження) для оптимізації розкладу технічного обслуговування.
   * Автоматичне перенаправлення пасажирів у разі виявлення заторів або несправностей.
* Розпізнавання аварійних ситуацій:
   * Використання комп’ютерного зору (якщо встановлені камери) для виявлення нештатних ситуацій (наприклад, падіння пасажира, застрягання дверей).
   * Автоматичний виклик  их служб у разі небезпеки.
        Для ефективної роботи ШІ необхідно збирати такі дані:
* Телеметрія від датчиків:
   * показники температури, вологості, вібрації, навантаження, часу роботи;
   * дані про аварійні події (час, тип несправності, тривалість ремонту).
* Дані про використання ліфтів:
   * кількість поїздок, час очікування, патерни руху пасажирів,
   * історія технічного обслуговування (частота ремонтів, витратні матеріали).
* Додаткові джерела (якщо доступні):
   * відеозаписи з камер спостереження (для аналізу поведінки пасажирів),
   * відгуки мешканців через мобільний додаток (текстові або голосові).
        Методи збору даних:
* автоматичне логування показників датчиків у реальному часі,
* агрегація статистики у централізованій базі даних,
* використання API для інтеграції з іншими системами (наприклад, CRM або IoT-платформами).
        Для реалізації ШІ можливі три підходи:
1. Навчання власної моделі:
* Переваги:
   * Модель буде максимально адаптована до специфіки даних системи.
   * Можна враховувати унікальні фактори (тип ліфтів, кліматичні умови).
* Недоліки:
   * Вимагає значних обчислювальних ресурсів та експертних знань.
   * Необхідність регулярного донавчання на нових даних.
2. Використання готових API, наприклад Azure AI, Google Vertex AI:
* Переваги:
   * Швидка інтеграція без необхідності розробки власних алгоритмів.
   * Можливість використання передових моделей (наприклад, для аналізу зображень).
* Недоліки:
   * Залежність від сторонніх сервісів (вартість, доступність).
   * Обмежена гнучкість у налаштуванні під конкретні потреби.
3. Гібридний підхід (власна модель + готові API), оптимальний варіант: 
* Використання готових API для базових задач (наприклад, обробка текстових скарг мешканців).
* Розробка спеціалізованих моделей для прогнозування поломок на основі власних даних.
        Рекомендації:
* Почати з інтеграції готових API для швидкого отримання результатів.
* Поступово розвивати власні моделі, збираючи більше даних.
* Використовувати автоматичне донавчання (AutoML) для покращення точності прогнозів.
        Інтеграція ШІ у систему моніторингу ліфтів дозволить перейти від реактивного до проактивного обслуговування, знизити витрати на ремонт та підвищити безпеку пасажирів. Найефективнішим підходом є поєднання готових API для швидкого старту та розробки власних моделей для глибокої оптимізації.


3.3 Limitations and Exclusions (Обмеження та виключення)


        У системі моніторингу та обслуговування ліфтів існують певні технічні, економічні та архітектурні обмеження, а також функціональні виключення, які були навмисно зроблені для поточного та майбутнього розвитку.
        Технічні обмеження:
1. Обмежена точність прогнозування ШІ. Навіть із застосуванням машинного навчання система не може гарантувати 100 % точності у передбаченні поломок через:
* вплив зовнішніх факторів (наприклад, раптові перепади напруги, механічні пошкодження),
* недостатній обсяг історичних даних на початкових етапах роботи.
2. Залежність від якості даних IoT-датчиків:
* Помилки в роботі сенсорів (наприклад, збої в калібруванні) можуть призводити до хибних сповіщень.
* Система не виключає «фантомні» події (помилкові спрацьовування датчиків).
3. Латентність у реальному часі. Затримки в передачі даних (через мережеві проблеми або обмежену пропускну здатність) можуть впливати на оперативність реакції.
        Функціональні винятки:
1. Повна автономність ремонту, без людського втручання. Система не включає автоматичні механізми фізичного ремонту (наприклад, роботизовані руки для заміни деталей), оскільки:
* вимагає складної інтеграції з механічними системами ліфтів,
* потенційно небезпечна без нагляду фахівців.
2. Розпізнавання осіб через камери (якщо вони є). Функція відеоаналітики обмежується виявленням аварійних ситуацій, але не ідентифікацією осіб через:
* юридичні обмеження (GDPR, закони про захист персональних даних),
* високі вимоги до обчислювальних потужностей.
3. Повна заміна людських операторів у колцентрі:
* Чат-боти та голосові помічники на базі ШІ можуть обробляти лише стандартні запити, наприклад «Ліфт не працює».
* Складні технічні питання, наприклад діагностика електроніки, вимагають участі фахівців.
4. Інтеграція з усіма існуючими CRM / ERP-системами. Підтримка обмежена популярними платформами (наприклад, Salesforce, 1С) через:
* відсутність стандартизованих API у деяких рішеннях,
* високі витрати на адаптацію під нішеві системи.
5. Мультимодальні сповіщення (наприклад, SMS, соцмережі). На першому етапі сповіщення надсилаються лише через мобільний додаток і електронну пошту через:
* обмеження бюджету на SMS-шлюзи,
* ризик спаму в соцмережах.
        Архітектурні та бізнес-обмеження:
1. Відсутність офлайн-режиму для мобільного додатка. Додаток потребує інтернет-з’єднання для синхронізації даних, оскільки:
* локальне зберігання всієї телеметрії неможливе через обсяги даних,
* офлайн-доступ до панелі управління знизив би безпеку (наприклад, затримка в аварійних сповіщеннях).
2. Підтримка лише сучасних ліфтів з IoT-датчиками. Система не адаптована для ліфтів без цифрових інтерфейсів (наприклад, радянські моделі) через:
* високу вартість модернізації такого обладнання,
* необхідність фізичного втручання для встановлення сенсорів.
3. Відмова від блокчейну для логування подій. Хоча технологія могла б забезпечити прозорість, її виключено через:
* надмірну складність для поточних потреб,
* високі витрати на транзакції.
        Система спеціально не включає функції, які:
* вимагають значних додаткових ресурсів (наприклад, автономні ремонтні модулі),
* можуть порушувати закони або безпеку (наприклад, розпізнавання осіб),
* не є критичними для основного завдання, тобто для моніторингу та профілактики поломок.
        Ці обмеження дозволяють зосередитися на найважливіших можливостях системи, забезпечуючи її стабільність і масштабованість.
4 BUSINESS CONTEXT (БІЗНЕС-КОНТЕКСТ)
4.3. Operating Environment (Робоче середовище)


        Для реалізації проєкту буде використано сучасні програмні засоби, інструменти та технології, які забезпечують ефективну розробку серверної частини, бази даних, IoT-компонентів, а також фронтенду і мобільного застосунку. Робоче середовище розробки поєднує сучасні технології, що дозволяють створити ефективну, масштабовану та зручну систему для моніторингу й обслуговування ліфтів у житлових комплексах.
        Серверна частина розробляється з використанням Flask — легкого вебфреймворку для Python. Flask забезпечує простоту у використанні та дозволяє швидко створювати REST API для взаємодії з клієнтськими додатками. Завдяки своїй модульній архітектурі Flask підходить для інтеграції з іншими компонентами проєкту, такими як база даних та IoT.
        Для зберігання даних використовується Microsoft SQL Server. Ця реляційна база даних забезпечує високу продуктивність та надійність, а також підтримує інтеграцію з Python через бібліотеку SQLAlchemy. Структура бази даних розроблена таким чином, щоб забезпечити зберігання інформації про стан ліфтів, їх обслуговування, а також дані для аналітики.
        IoT-система реалізується на основі Python. Імітація роботи сенсорів виконується через спеціально створений графічний інтерфейс, що дозволяє тестувати функціонал системи без використання реального обладнання. Протоколи взаємодії IoT з сервером базуються на сучасних стандартах, таких як MQTT або HTTP, що забезпечує масштабованість і швидкість обробки даних.
        Фронтенд-частина розробляється із застосуванням HTML, CSS та JavaScript. HTML відповідає за структуру вебдодатку, CSS — за стильове оформлення, а JavaScript забезпечує інтерактивність. Крім того, для покращення користувацького досвіду можуть бути використані сучасні бібліотеки, такі як Bootstrap, або фреймворки, такі як React.js.
        Для мобільного застосунку використовується Android Studio з мовою програмування Kotlin. Додаток забезпечує доступ до інформації про стан ліфтів, повідомлення про аварії та дозволяє здійснювати базове управління. Завдяки інтеграції з REST API серверної частини мобільний застосунок працює у реальному часі.
